require "matrix"
require "table_format"

class ReversiApp
  Around = [
    [-1, -1], [0, -1], [1, -1],
    [-1,  0],          [1,  0],
    [-1,  1], [0,  1], [1,  1],
  ].collect { |e| Vector[*e] }

  attr_accessor :board
  attr_accessor :players
  attr_accessor :params
  attr_accessor :pass_count

  def initialize(params = {})
    @params = {
      dimension: 4 * 2,
    }.merge(params)

    @players = [:o, :x]
    @board = {}
    @pass_count = 0

    placement
  end

  def available_places(player)
    blank_places.find_all { |e| can_place_on?(player, e) }
  end

  def place_on(player, place, &block)
    if block_given?
      memento = board.dup
      begin
        place_on(player, place)
        yield
      ensure
        self.board = memento
      end
    else
      hash = reversible_counts_hash(player, place)

      # 空なら利きが一つもないことになるのでパスになるが事前にチェックしておきたいのでここでは例外とする
      if hash.empty?
        raise "反転できないのに置きました : player:#{player} place:#{place}\n#{self}"
      end

      # 置く
      board[place] = player
      # run_counts[:place_on] += 1

      # 反転していく
      hash.each do |vec, count|
        v = place
        count.times do
          v += vec
          board[v] = player
        end
      end
    end
  end

  def evaluate(player)
    run_counts[:evaluate] += 1
    hash = histogram
    same_pos[board] += 1
    o = hash[:o]
    x = hash[:x]
    if player == :o
      o - x
    else
      x - o
    end
  end

  def histogram
    players.inject({}) { |a, e| a.merge(e => board.values.count(e)) }
  end

  def player_at(turn)
    players[turn.modulo(players.count)]
  end

  def continuous_pass?
    pass_count >= players.size
  end

  def game_over?
    board.size >= (dimension**2) || continuous_pass?
  end

  def run_counts
    @run_counts ||= Hash.new(0)
  end

  def same_pos
    @same_pos ||= Hash.new(0)
  end

  def dimension
    params[:dimension]
  end

  def to_s
    dimension.times.collect { |y|
      dimension.times.collect { |x|
        v = board[Vector[x, y]]
        if v
          if v == :o
            "○"
          else
            "×"
          end
        else
          "・"
        end
      }.join + "\n"
    }.join
  end

  def run
    placement
    256.times do |turn|
      if game_over?
        break
      end
      player = player_at(turn)
      places = available_places(player)
      count = nil
      if places.empty?
        @pass_count += 1
      else
        @pass_count = 0
        if true
          # 賢く指す
          place = move_ordering(player, places).first
        else
          # 適当に指す
          place = places.sample
        end
        count = place_on(player, place)
      end
      puts "---------------------------------------- [#{turn}] #{player} 反転数:#{count || 'pass'} #{histogram} 評価値:#{evaluate(:o)}"
      puts self
    end
    tp board.values.group_by(&:itself).transform_values(&:size)
  end

  def move_ordering(player, places)
    places.sort_by { |e| -reversible_total_count(player, e) }
  end

  private

  def reversible_total_count(player, place)
    reversible_counts_hash(player, place).values.sum
  end

  # 1個以上反転させられる利きと個数をペアにしたハッシュを返す
  def reversible_counts_hash(player, place)
    Around.collect { |vec|
      count = reversible_one_way_count(player, place, vec)
      if count >= 1
        [vec, count]
      end
    }.compact.to_h
  end

  def placement
    half = dimension / 2
    board[Vector[half - 1, half - 1]] = :x
    board[Vector[half, half]]         = :x
    board[Vector[half, half - 1]]     = :o
    board[Vector[half - 1, half]]     = :o
  end

  def blank_places
    dimension.times.flat_map { |y|
      dimension.times.collect { |x|
        v = Vector[x, y]
        unless board[v]
          v
        end
      }
    }.compact
  end

  def can_place_on?(player, place)
    raise "not blank" if board[place]
    Around.any? { |e| reversible_one_way_count(player, place, e) >= 1 }
  end

  def reversible_one_way_count(player, place, vec)
    count = 0
    loop do
      place += vec          # 置いた次の位置から進めるため最初に実行する
      # 外に出てしまったらダメ
      if place.any? { |e| !(0...dimension).cover?(e) }
        count = 0
        break
      end
      element = board[place]
      # 空の升ならダメ
      unless element
        count = 0
        break
      end
      # 自分の駒が見つかった
      if element == player
        break
      end
      count += 1
    end
    count
  end
end

if $0 == __FILE__
  ReversiApp.new.run
end
# >> ---------------------------------------- [0] o 反転数:{Vector[0, 1]=>1} {:o=>4, :x=>1} 評価値:3
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・○・・・・
# >> ・・・○○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [1] x 反転数:{Vector[1, 1]=>1} {:o=>3, :x=>3} 評価値:0
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・×○・・・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [2] o 反転数:{Vector[1, 0]=>1} {:o=>5, :x=>2} 評価値:3
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・○○○・・・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [3] x 反転数:{Vector[1, 1]=>1} {:o=>4, :x=>4} 評価値:0
# >> ・・・・・・・・
# >> ・×・・・・・・
# >> ・○×○・・・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [4] o 反転数:{Vector[0, 1]=>1} {:o=>6, :x=>3} 評価値:3
# >> ・○・・・・・・
# >> ・○・・・・・・
# >> ・○×○・・・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [5] x 反転数:{Vector[-1, 0]=>1, Vector[0, 1]=>1} {:o=>4, :x=>6} 評価値:-2
# >> ・○・・・・・・
# >> ・○・・・・・・
# >> ・○×××・・・
# >> ・・・××・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [6] o 反転数:{Vector[-1, 0]=>3, Vector[-1, 1]=>1} {:o=>9, :x=>2} 評価値:7
# >> ・○・・・・・・
# >> ・○・・・・・・
# >> ・○○○○○・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [7] x 反転数:{Vector[1, 1]=>2} {:o=>7, :x=>5} 評価値:2
# >> ×○・・・・・・
# >> ・×・・・・・・
# >> ・○×○○○・・
# >> ・・・×○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [8] o 反転数:{Vector[1, 0]=>1} {:o=>9, :x=>4} 評価値:5
# >> ×○・・・・・・
# >> ・×・・・・・・
# >> ・○×○○○・・
# >> ・・○○○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [9] x 反転数:{Vector[-1, 0]=>3} {:o=>6, :x=>8} 評価値:-2
# >> ×○・・・・・・
# >> ・×・・・・・・
# >> ・○×××××・
# >> ・・○○○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [10] o 反転数:{Vector[-1, 0]=>5} {:o=>12, :x=>3} 評価値:9
# >> ×○・・・・・・
# >> ・×・・・・・・
# >> ・○○○○○○○
# >> ・・○○○・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [11] x 反転数:{Vector[0, 1]=>2} {:o=>10, :x=>6} 評価値:4
# >> ×○・・・・・・
# >> ・×・・×・・・
# >> ・○○○×○○○
# >> ・・○○×・・・
# >> ・・・○×・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [12] o 反転数:{Vector[-1, -1]=>1, Vector[-1, 0]=>1} {:o=>13, :x=>4} 評価値:9
# >> ×○・・・・・・
# >> ・×・・×・・・
# >> ・○○○×○○○
# >> ・・○○○・・・
# >> ・・・○○○・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [13] x 反転数:{Vector[-1, -1]=>3} {:o=>10, :x=>8} 評価値:2
# >> ×○・・・・・・
# >> ・×・・×・・・
# >> ・○×○×○○○
# >> ・・○×○・・・
# >> ・・・○×○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [14] o 反転数:{Vector[0, 1]=>2} {:o=>13, :x=>6} 評価値:7
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ・○×○○○○○
# >> ・・○×○・・・
# >> ・・・○×○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [15] x 反転数:{Vector[0, -1]=>1, Vector[1, 0]=>1} {:o=>11, :x=>9} 評価値:2
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ・○×○○○○○
# >> ・・××○・・・
# >> ・・×××○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [16] o 反転数:{Vector[1, -1]=>1, Vector[1, 0]=>3} {:o=>16, :x=>5} 評価値:11
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ・○×○○○○○
# >> ・・○×○・・・
# >> ・○○○○○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [17] x 反転数:{Vector[0, -1]=>1, Vector[1, 0]=>1} {:o=>14, :x=>8} 評価値:6
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ・××○○○○○
# >> ・×××○・・・
# >> ・○○○○○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [18] o 反転数:{Vector[1, 0]=>2, Vector[1, 1]=>1} {:o=>18, :x=>5} 評価値:13
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ○○○○○○○○
# >> ・○××○・・・
# >> ・○○○○○・・
# >> ・・・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [19] x 反転数:{Vector[0, -1]=>3, Vector[1, -1]=>1} {:o=>14, :x=>10} 評価値:4
# >> ×○・・○・・・
# >> ・×・・○・・・
# >> ○×○○○○○○
# >> ・×××○・・・
# >> ・××○○○・・
# >> ・×・・・×・・
# >> ・・・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [20] o 反転数:{Vector[0, -1]=>5} {:o=>20, :x=>5} 評価値:15
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○××○・・・
# >> ・○×○○○・・
# >> ・○・・・×・・
# >> ・○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [21] x 反転数:{Vector[-1, 0]=>3} {:o=>17, :x=>9} 評価値:8
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○××○・・・
# >> ・○×××××・
# >> ・○・・・×・・
# >> ・○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [22] o 反転数:{Vector[-1, 0]=>5} {:o=>23, :x=>4} 評価値:19
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○××○・・・
# >> ・○○○○○○○
# >> ・○・・・×・・
# >> ・○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [23] x 反転数:{Vector[1, -1]=>2} {:o=>21, :x=>7} 評価値:14
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○××○・・・
# >> ・○×○○○○○
# >> ・×・・・×・・
# >> ×○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [24] o 反転数:{Vector[0, -1]=>2} {:o=>24, :x=>5} 評価値:19
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○○×○・・・
# >> ・○○○○○○○
# >> ・×○・・×・・
# >> ×○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [25] x 反転数:{Vector[0, -1]=>1, Vector[-1, 0]=>1} {:o=>22, :x=>8} 評価値:14
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○○×○・・・
# >> ・○○×○○○○
# >> ・×××・×・・
# >> ×○・・・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [26] o 反転数:{Vector[-1, -1]=>1, Vector[0, -1]=>3} {:o=>27, :x=>4} 評価値:23
# >> ×○・・○・・・
# >> ・○・・○・・・
# >> ○○○○○○○○
# >> ・○○○○・・・
# >> ・○○○○○○○
# >> ・×○○・×・・
# >> ×○・○・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [27] x 反転数:{Vector[-1, 1]=>3} {:o=>24, :x=>8} 評価値:16
# >> ×○・・○・・・
# >> ・○・・○×・・
# >> ○○○○×○○○
# >> ・○○×○・・・
# >> ・○×○○○○○
# >> ・×○○・×・・
# >> ×○・○・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [28] o 反転数:{Vector[0, 1]=>1} {:o=>26, :x=>7} 評価値:19
# >> ×○・・○○・・
# >> ・○・・○○・・
# >> ○○○○×○○○
# >> ・○○×○・・・
# >> ・○×○○○○○
# >> ・×○○・×・・
# >> ×○・○・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [29] x 反転数:{Vector[0, -1]=>2, Vector[-1, 0]=>2} {:o=>22, :x=>12} 評価値:10
# >> ×○・・○○・・
# >> ・○・・○○・・
# >> ○○○○×○○○
# >> ・○○××・・・
# >> ・○×○×○○○
# >> ・×××××・・
# >> ×○・○・・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [30] o 反転数:{Vector[-1, -1]=>2, Vector[0, -1]=>4, Vector[1, -1]=>1} {:o=>30, :x=>5} 評価値:25
# >> ×○・・○○・・
# >> ・○・・○○・・
# >> ○○○○○○○○
# >> ・○○×○・・・
# >> ・○○○○○○○
# >> ・××○○○・・
# >> ×○・○○・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [31] x 反転数:{Vector[-1, 0]=>3} {:o=>27, :x=>9} 評価値:18
# >> ×○・・○○・・
# >> ・○・・○○・・
# >> ○○○○○○○○
# >> ・○○×○・・・
# >> ・○○○○○○○
# >> ・××××××・
# >> ×○・○○・・・
# >> ・・・・・・・・
# >> ---------------------------------------- [32] o 反転数:{Vector[-1, -1]=>1, Vector[0, -1]=>1, Vector[1, -1]=>1} {:o=>31, :x=>6} 評価値:25
# >> ×○・・○○・・
# >> ・○・・○○・・
# >> ○○○○○○○○
# >> ・○○×○・・・
# >> ・○○○○○○○
# >> ・×××○○○・
# >> ×○・○○○・・
# >> ・・・・・・・・
# >> ---------------------------------------- [33] x 反転数:{Vector[0, 1]=>3} {:o=>28, :x=>10} 評価値:18
# >> ×○・・○○・・
# >> ・○×・○○・・
# >> ○○×○○○○○
# >> ・○××○・・・
# >> ・○×○○○○○
# >> ・×××○○○・
# >> ×○・○○○・・
# >> ・・・・・・・・
# >> ---------------------------------------- [34] o 反転数:{Vector[1, 0]=>3} {:o=>32, :x=>7} 評価値:25
# >> ×○・・○○・・
# >> ・○×・○○・・
# >> ○○×○○○○○
# >> ・○××○・・・
# >> ・○×○○○○○
# >> ○○○○○○○・
# >> ×○・○○○・・
# >> ・・・・・・・・
# >> ---------------------------------------- [35] x 反転数:{Vector[-1, -1]=>4} {:o=>28, :x=>12} 評価値:16
# >> ×○・・○○・・
# >> ・○×・○○・・
# >> ○○××○○○○
# >> ・○×××・・・
# >> ・○×○○×○○
# >> ○○○○○○×・
# >> ×○・○○○・×
# >> ・・・・・・・・
# >> ---------------------------------------- [36] o 反転数:{Vector[-1, 0]=>3, Vector[0, 1]=>1} {:o=>33, :x=>8} 評価値:25
# >> ×○・・○○・・
# >> ・○×・○○・・
# >> ○○××○○○○
# >> ・○○○○○・・
# >> ・○×○○○○○
# >> ○○○○○○×・
# >> ×○・○○○・×
# >> ・・・・・・・・
# >> ---------------------------------------- [37] x 反転数:{Vector[0, -1]=>4} {:o=>29, :x=>13} 評価値:16
# >> ×○・・○○・・
# >> ・○×・○○・・
# >> ○○××○○○○
# >> ・○○×○○・・
# >> ・○××○○○○
# >> ○○○×○○×・
# >> ×○・×○○・×
# >> ・・・×・・・・
# >> ---------------------------------------- [38] o 反転数:{Vector[0, 1]=>2} {:o=>32, :x=>11} 評価値:21
# >> ×○○・○○・・
# >> ・○○・○○・・
# >> ○○○×○○○○
# >> ・○○×○○・・
# >> ・○××○○○○
# >> ○○○×○○×・
# >> ×○・×○○・×
# >> ・・・×・・・・
# >> ---------------------------------------- [39] x 反転数:{Vector[-1, 0]=>2, Vector[-1, 1]=>2, Vector[0, 1]=>1} {:o=>27, :x=>17} 評価値:10
# >> ×○○・○○・・
# >> ・○○・○○・・
# >> ○○○×○○○○
# >> ・○○××××・
# >> ・○××○××○
# >> ○○○××○×・
# >> ×○・×○○・×
# >> ・・・×・・・・
# >> ---------------------------------------- [40] o 反転数:{Vector[-1, 0]=>4, Vector[-1, 1]=>1} {:o=>33, :x=>12} 評価値:21
# >> ×○○・○○・・
# >> ・○○・○○・・
# >> ○○○×○○○○
# >> ・○○○○○○○
# >> ・○××○×○○
# >> ○○○××○×・
# >> ×○・×○○・×
# >> ・・・×・・・・
# >> ---------------------------------------- [41] x 反転数:{Vector[-1, -1]=>5, Vector[-1, 0]=>2} {:o=>26, :x=>20} 評価値:6
# >> ×○○・○○・・
# >> ・×○・○○・・
# >> ○○××○○○○
# >> ・○○×○○○○
# >> ・○××××○○
# >> ○○○××××・
# >> ×○・×××××
# >> ・・・×・・・・
# >> ---------------------------------------- [42] o 反転数:{Vector[-1, -1]=>1, Vector[0, -1]=>3, Vector[1, -1]=>2} {:o=>33, :x=>14} 評価値:19
# >> ×○○・○○・・
# >> ・×○・○○・・
# >> ○○××○○○○
# >> ・○○×○○○○
# >> ・○××○×○○
# >> ○○○×○×○・
# >> ×○・○○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [43] x 反転数:{Vector[-1, 1]=>2, Vector[0, 1]=>4} {:o=>27, :x=>21} 評価値:6
# >> ×○○・○○・・
# >> ・×○・○○×・
# >> ○○××○××○
# >> ・○○××○×○
# >> ・○××○××○
# >> ○○○×○××・
# >> ×○・○○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [44] o 反転数:{Vector[-1, 1]=>1, Vector[0, 1]=>4} {:o=>33, :x=>16} 評価値:17
# >> ×○○・○○・・
# >> ・×○○○○×・
# >> ○○○○○××○
# >> ・○○○×○×○
# >> ・○×○○××○
# >> ○○○○○××・
# >> ×○・○○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [45] x 反転数:{Vector[-1, 0]=>2, Vector[0, 1]=>6, Vector[1, 1]=>1} {:o=>24, :x=>26} 評価値:-2
# >> ××××○○・・
# >> ・×○××○×・
# >> ○○○×○××○
# >> ・○○××○×○
# >> ・○××○××○
# >> ○○○×○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [46] o 反転数:{Vector[-1, 1]=>4} {:o=>29, :x=>22} 評価値:7
# >> ××××○○・○
# >> ・×○××○○・
# >> ○○○×○○×○
# >> ・○○×○○×○
# >> ・○×○○××○
# >> ○○○×○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [47] x 反転数:{Vector[1, -1]=>2, Vector[1, 0]=>2, Vector[1, 1]=>2} {:o=>23, :x=>29} 評価値:-6
# >> ××××○○・○
# >> ・××××○○・
# >> ○×○×○○×○
# >> ××××○○×○
# >> ・××○○××○
# >> ○○××○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [48] o 反転数:{Vector[1, 0]=>4, Vector[1, 1]=>2} {:o=>30, :x=>23} 評価値:7
# >> ××××○○・○
# >> ○○○○○○○・
# >> ○○○×○○×○
# >> ××○×○○×○
# >> ・××○○××○
# >> ○○××○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [49] x 反転数:{Vector[-1, 0]=>2, Vector[-1, 1]=>2, Vector[0, 1]=>1} {:o=>25, :x=>29} 評価値:-4
# >> ×××××××○
# >> ○○○○○××・
# >> ○○○××○×○
# >> ××○×○○×○
# >> ・××○○××○
# >> ○○××○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [50] o 反転数:{Vector[0, -1]=>1, Vector[1, -1]=>1, Vector[1, 0]=>2} {:o=>30, :x=>25} 評価値:5
# >> ×××××××○
# >> ○○○○○××・
# >> ○○○××○×○
# >> ○○○×○○×○
# >> ○○○○○××○
# >> ○○××○××・
# >> ×○・×○○××
# >> ・・・×○・・・
# >> ---------------------------------------- [51] x 反転数:{Vector[0, -1]=>6} {:o=>24, :x=>32} 評価値:-8
# >> ×××××××○
# >> ○×○○○××・
# >> ○×○××○×○
# >> ○×○×○○×○
# >> ○×○○○××○
# >> ○×××○××・
# >> ××・×○○××
# >> ・×・×○・・・
# >> ---------------------------------------- [52] o 反転数:{Vector[-1, -1]=>1, Vector[0, -1]=>1, Vector[1, -1]=>1, Vector[1, 0]=>1} {:o=>29, :x=>28} 評価値:1
# >> ×××××××○
# >> ○×○○○××・
# >> ○×○××○×○
# >> ○×○×○○×○
# >> ○×○○○××○
# >> ○○○○○××・
# >> ××○○○○××
# >> ・×・×○・・・
# >> ---------------------------------------- [53] x 反転数:{Vector[0, -1]=>6, Vector[1, -1]=>2} {:o=>21, :x=>37} 評価値:-16
# >> ×××××××○
# >> ○××○○××・
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○××○
# >> ○○×○×××・
# >> ××××○○××
# >> ・×××○・・・
# >> ---------------------------------------- [54] o 反転数:{Vector[0, -1]=>1, Vector[1, -1]=>2, Vector[1, 0]=>3} {:o=>28, :x=>31} 評価値:-3
# >> ×××××××○
# >> ○××○○××・
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○××○
# >> ○○○○×××・
# >> ○○××○○××
# >> ○○○○○・・・
# >> ---------------------------------------- [55] x 反転数:{Vector[-1, -1]=>2, Vector[0, -1]=>1} {:o=>25, :x=>35} 評価値:-10
# >> ×××××××○
# >> ○××○○××・
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○××○
# >> ○○○××××・
# >> ○○××××××
# >> ○○○○○×・・
# >> ---------------------------------------- [56] o 反転数:{Vector[-1, -1]=>1, Vector[-1, 0]=>4} {:o=>31, :x=>30} 評価値:1
# >> ×××××××○
# >> ○××○○××・
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○×○○
# >> ○○○○○○○○
# >> ○○××××××
# >> ○○○○○×・・
# >> ---------------------------------------- [57] x 反転数:{Vector[0, 1]=>4} {:o=>27, :x=>35} 評価値:-8
# >> ×××××××○
# >> ○××○○×××
# >> ○××××○××
# >> ○×××○○××
# >> ○××○○×○×
# >> ○○○○○○○×
# >> ○○××××××
# >> ○○○○○×・・
# >> ---------------------------------------- [58] o 反転数:{Vector[-1, -1]=>1, Vector[0, -1]=>6} {:o=>35, :x=>28} 評価値:7
# >> ×××××××○
# >> ○××○○××○
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○×○○
# >> ○○○○○○○○
# >> ○○××××○○
# >> ○○○○○×・○
# >> ---------------------------------------- [59] x 反転数:{Vector[0, -1]=>3} {:o=>32, :x=>32} 評価値:0
# >> ×××××××○
# >> ○××○○××○
# >> ○××××○×○
# >> ○×××○○×○
# >> ○××○○××○
# >> ○○○○○○×○
# >> ○○×××××○
# >> ○○○○○××○
# >> |---+----|
# >> | x | 32 |
# >> | o | 32 |
# >> |---+----|
