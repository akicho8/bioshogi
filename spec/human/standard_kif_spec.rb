require "spec_helper"

module Bioshogi
  describe "将棋連盟が定めている人間向け棋譜入力" do
    describe "P1 到達地点に複数の同じ駒が動ける場合「上」または「寄」または「引」で記入" do
      def test1(str)
        xcontainer = Xcontainer.new
        xcontainer.board.placement_from_shape(<<~EOT)
        +---------------------------+
        | ・ ・ ・ ・ ・ ・ 金 ・ ・|
        | ・ ○ 金 ・ ・ ・ ○ ・ ・|
        | 金 ・ ・ ・ ・ 金 ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ ・ ○ 金 ・ ・ ・|
        | ・ ・ ・ ・ 金 ・ ・ ・ ・|
        | ・ ・ 銀 ・ ・ ・ ・ 銀 ・|
        | ・ ○ ・ ・ ・ ・ ・ ○ ・|
        | ・ 銀 ・ ・ ・ 銀 ・ ・ ・|
        +---------------------------+
EOT
        xcontainer.execute(str)
        xcontainer.hand_logs.last.to_kif_ki2_csa
      end

      it "works" do
        # P1A
        assert("９３の金が８２へ動く場合「８２金上」") { test1("８２金上") == ["８二金(93)", "８二金上", "+9382KI"] }
        assert("７２の金が８２へ動く場合「８２金寄」") { test1("８２金寄") == ["８二金(72)", "８二金寄", "+7282KI"] }

        # P1B
        assert("４３の金が３２に動く場合「３２金上」") { test1("３２金上") == ["３二金(43)", "３二金上", "+4332KI"] }
        assert("３１の金が３２に動く場合「３２金引」") { test1("３２金引") == ["３二金(31)", "３二金引", "+3132KI"] }

        # P1C
        assert("５６の金が５５に動く場合「５５金上」") { test1("５５金上") == ["５五金(56)", "５五金上", "+5655KI"] }
        assert("４５の金が５５に動く場合「５５金寄」") { test1("５５金寄") == ["５五金(45)", "５五金寄", "+4555KI"] }

        # P1D
        assert("８９の銀が８８に動く場合「８８銀上」") { test1("８８銀上") == ["８八銀(89)", "８八銀上", "+8988GI"] }
        assert("７７の銀が８８に動く場合「８８銀引」") { test1("８８銀引") == ["８八銀(77)", "８八銀引", "+7788GI"] }

        # P1E
        assert("４９の銀が３８に動く場合「３８銀上」") { test1("３８銀上") == ["３八銀(49)", "３八銀上", "+4938GI"] }
        assert("２７の銀が３８に動く場合「３８銀引」") { test1("３８銀引") == ["３八銀(27)", "３八銀引", "+2738GI"] }
      end
    end

    describe "P2 到達地点に2枚の同じ駒が動ける場合、動作でどの駒が動いたかわからない時は、「左」「右」で記入" do
      def test1(str)
        xcontainer = Xcontainer.new
        xcontainer.board.placement_from_shape(<<~EOT)
        +---------------------------+
          | ・ ○ ・ ・ ・ ・ ・ ・ ・|
        | 金 ・ 金 ・ ・ ・ 金 ○ 金|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ 銀 ・ 銀 ・ ・ ・|
        | ・ ・ ・ ・ ○ ・ ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ○ ・ ・ ・ ○ ・ ・|
        | ・ 金 金 ・ ・ ・ 銀 銀 ・|
        +---------------------------+
          EOT
        xcontainer.execute(str)
        xcontainer.hand_logs.last.to_kif_ki2_csa
      end

      it "works" do
        # P2A 上がる駒が2枚ある場合「上」を省略して「左」「右」
        assert("９２の金が８１へ動く場合「８１金左」") { test1("８１金左") == ["８一金(92)", "８一金左", "+9281KI"] }
        assert("７２の金が８１へ動く場合「８１金右」") { test1("８１金右") == ["８一金(72)", "８一金右", "+7281KI"] }

        # P2B 寄る駒が2枚ある場合「寄」を省略して「左」「右」
        assert("３２の金が２２に動く場合「２２金左」") { test1("２２金左") == ["２二金(32)", "２二金左", "+3222KI"] }
        assert("１２の金が２２に動く場合「２２金右」") { test1("２２金右") == ["２二金(12)", "２二金右", "+1222KI"] }

        # P2C 引く駒が2枚ある場合「引」を省略して「左」「右」
        assert("６５の銀が５６に動く場合「５６銀左」") { test1("５６銀左") == ["５六銀(65)", "５六銀左", "+6556GI"] }
        assert("４５の銀が５６に動く場合「５６銀右」") { test1("５６銀右") == ["５六銀(45)", "５六銀右", "+4556GI"] }

        # P2D 例外で、金銀が横に2枚以上並んでいる場合のみ1段上に上がる時「直」
        assert("８９の金が７８に動く場合「７８金左」") { test1("７８金左") == ["７八金(89)", "７八金左", "+8978KI"] }
        assert("７９の金が７８に動く場合「７８金直」") { test1("７８金直") == ["７八金(79)", "７八金直", "+7978KI"] }

        # P2E
        assert("３９の銀が３８に動く場合「３８銀直」") { test1("３８銀直") == ["３八銀(39)", "３八銀直", "+3938GI"] }
        assert("２９の銀が３８に動く場合「３８銀右」") { test1("３８銀右") == ["３八銀(29)", "３八銀右", "+2938GI"] }
      end
    end

    describe "P3 到達地点に3枚以上の同じ駒が動ける場合、動作でどの駒が動いたかわからない時" do
      def test1(str)
        xcontainer = Xcontainer.new
        xcontainer.board.placement_from_shape(<<~EOT)
        +---------------------------+
          | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ ・ ○ ・ ・ ・ ・|
        | ・ ・ ・ 金 金 金 ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ ・ ・ ・ ・ ・ ・ ・ ・|
        | ・ と ・ ・ ・ ・ 銀 ・ 銀|
        | と ○ ・ ・ ・ ・ ・ ○ ・|
        | と と と ・ ・ ・ 銀 銀 ・|
        +---------------------------+
          EOT
        xcontainer.execute(str)
        xcontainer.hand_logs.last.to_kif_ki2_csa
      end

      it "works" do
        # P3A
        assert("６３の金が５２へ動く場合「５２金左」") { test1("５２金左") == ["５二金(63)", "５二金左", "+6352KI"] }
        assert("５３の金が５２へ動く場合「５２金直」") { test1("５２金直") == ["５二金(53)", "５二金直", "+5352KI"] }
        assert("４３の金が５２へ動く場合「５２金右」") { test1("５２金右") == ["５二金(43)", "５二金右", "+4352KI"] }

        # P3B
        assert("７９のと金が８８に動く場合「８８と右」")   { test1("８８と右")   == ["８八と(79)", "８八と右",   "+7988TO"] } # ※右から移動する駒が1枚のみであるので「上」を省略する }
        assert("８９のと金が８８に動く場合「８８と直」")   { test1("８８と直")   == ["８八と(89)", "８八と直",   "+8988TO"] }
        assert("９９のと金が８８に動く場合「８８と左上」") { test1("８８と左上") == ["８八と(99)", "８八と左上", "+9988TO"] } # ※左から移動する駒が2枚あるので「上」を省略できない }
        assert("９８のと金が８８に動く場合「８８と寄」")   { test1("８８と寄")   == ["８八と(98)", "８八と寄",   "+9888TO"] } # ※寄る駒が1枚しかないので「寄」のみとする }
        assert("８７のと金が８８に動く場合「８８と引」")   { test1("８８と引")   == ["８八と(87)", "８八と引",   "+8788TO"] }

        # P3C
        assert("２９の銀が２８に動く場合「２８銀直」」") { test1("２８銀直")   == ["２八銀(29)", "２八銀直", "+2928GI"] }
        assert("１７の銀が２８に動く場合「２８銀右」")   { test1("２８銀右")   == ["２八銀(17)", "２八銀右", "+1728GI"] }     # ※右から移動する駒が1枚のみであるので「引」を省略する }
        assert("３９の銀が２８へ動く場合「２８銀左上」") { test1("２８銀左上") == ["２八銀(39)", "２八銀左上", "+3928GI"] }   # ※左から移動する駒が2枚あるので「上」を省略できない }
        assert("３７の銀が２８へ動く場合「２８銀左引」") { test1("２８銀左引") == ["２八銀(37)", "２八銀左引", "+3728GI"] }   # ※左から移動する駒が2枚あるので「引」を省略できない }
      end
    end

    describe "P4 竜が2枚の場合はやはり動作を優先します。ただし、「直」は使わずに「左」「右」で記入" do
      def test1(str)
        xcontainer = Xcontainer.new
        xcontainer.board.placement_from_shape(@board)
        xcontainer.execute(str)
        xcontainer.hand_logs.last.to_kif_ki2_csa
      end

      describe "P4A" do
        before do
          @board = <<~EOT
+---------------------------+
| 龍 ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ○ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ 龍 ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("９１の竜が８２へ動く場合「８２竜引」") { test1("８２竜引") == ["８二龍(91)", "８二龍引", "+9182RY"] }
          assert("８４の竜が８２へ動く場合「８２竜上」") { test1("８２竜上") == ["８二龍(84)", "８二龍上", "+8482RY"] }
        end
      end

      describe "P4B" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ 龍 ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ○ ・ 龍 ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("２３の竜が４３へ動く場合「４３竜寄」") { test1("４３竜寄") == ["４三龍(23)", "４三龍寄", "+2343RY"] } # ※寄る駒が1枚なので「寄」（「４３竜右」ではありません） }
          assert("５２の竜が４３へ引く場合「４３竜引」") { test1("４３竜引") == ["４三龍(52)", "４三龍引", "+5243RY"] } # ※引く駒が1枚なので「引」（「４３竜左」ではありません） }
        end
      end

      describe "P4C" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ 龍 ・ ○ ・ 龍|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("５５の竜が３５に動く場合「３５竜左」") { test1("３５竜左") == ["３五龍(55)", "３五龍左", "+5535RY"] }
          assert("１５の竜が３５に動く場合「３５竜右」") { test1("３５竜右") == ["３五龍(15)", "３五龍右", "+1535RY"] }
        end
      end

      describe "P4D" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ○ ・ ・ ・ ・ ・ ・ ・|
| 龍 龍 ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("９９の竜が８８に動く場合「８８竜左」") { test1("８８竜左") == ["８八龍(99)", "８八龍左", "+9988RY"] }
          assert("８９の竜が８８に動く場合「８８竜右」") { test1("８８竜右") == ["８八龍(89)", "８八龍右", "+8988RY"] }
        end
      end

      describe "P4E" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ○|
| ・ ・ ・ ・ ・ ・ ・ 龍 ・|
| ・ ・ ・ ・ ・ ・ ・ ・ 龍|
+---------------------------+
EOT
        end

        it "works" do
          assert("２８の竜が１７に動く場合「１７竜左」") { test1("１７竜左") == ["１七龍(28)", "１七龍左", "+2817RY"] }
          assert("１９の竜が１７に動く場合「１７竜右」") { test1("１７竜右") == ["１七龍(19)", "１七龍右", "+1917RY"] }
        end
      end
    end

    describe "P5 馬が2枚の場合もやはり動作を優先します。竜と同様、「直」は使わずに「左」「右」で記入" do
      def test1(str)
        xcontainer = Xcontainer.new
        xcontainer.board.placement_from_shape(@board)
        xcontainer.execute(str)
        xcontainer.hand_logs.last.to_kif_ki2_csa
      end

      describe "P5A" do
        before do
          @board = <<~EOT
+---------------------------+
| 馬 馬 ・ ・ ・ ・ ・ ・ ・|
| ・ ○ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("９１の馬が８２へ動く場合「８２馬左」") { test1("８２馬左") == ["８二馬(91)", "８二馬左", "+9182UM"] }
          assert("８１の馬が８２へ動く場合「８２馬右」") { test1("８２馬右") == ["８二馬(81)", "８二馬右", "+8182UM"] }
        end
      end

      describe "P5B" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ 馬 ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| 馬 ○ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("９５の馬が８５へ動く場合「８５馬寄」") { test1("８５馬寄") == ["８五馬(95)", "８五馬寄", "+9585UM"] }
          assert("６３の馬が８５へ引く場合「８５馬引」") { test1("８５馬引") == ["８五馬(63)", "８五馬引", "+6385UM"] }
        end
      end

      describe "P5C" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ 馬|
| ・ ・ ・ ・ ・ ・ ・ ・ ○|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ 馬 ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("１１の馬が１２に動く場合「１２馬引」") { test1("１２馬引") == ["１二馬(11)", "１二馬引", "+1112UM"] }
          assert("３４の馬が１２に動く場合「１２馬上」") { test1("１２馬上") == ["１二馬(34)", "１二馬上", "+3412UM"] }
        end
      end

      describe "P5D" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ○ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| 馬 ・ ・ ・ 馬 ・ ・ ・ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("９９の馬が７７に動く場合「７７馬左」") { test1("７７馬左") == ["７七馬(99)", "７七馬左", "+9977UM"] }
          assert("５９の竜が７７に動く場合「７７馬右」") { test1("７７馬右") == ["７七馬(59)", "７七馬右", "+5977UM"] }
        end
      end

      describe "P5E" do
        before do
          @board = <<~EOT
+---------------------------+
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ ・|
| ・ ・ ・ ・ ・ 馬 ・ ・ ・|
| ・ ・ ・ ・ ・ ・ ・ ・ 馬|
| ・ ・ ・ ・ ・ ・ ・ ○ ・|
+---------------------------+
EOT
        end

        it "works" do
          assert("４７の馬が２９に動く場合「２９馬左」") { test1("２９馬左") == ["２九馬(47)", "２九馬左", "+4729UM"] }
          assert("１８の馬が２９に動く場合「２９馬右」") { test1("２９馬右") == ["２九馬(18)", "２九馬右", "+1829UM"] }
        end
      end
    end
  end
end
