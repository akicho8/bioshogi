s = File.read("standard_kif_spec.rb")
list = [
  "123456789",
  "１２３４５６７８９",
  "一二三四五六七八九",
]
n = list.join
s = s.gsub(/[#{n}]{2}/) do |s|
  list.each do |e|
    s = s.tr(e, e.reverse)
  end
  s
end

s = s.gsub(/\|.*\|/) do |s|
  s = s.chars.reverse.join
  s = s.gsub(/ \|/, "|")
  s = s.gsub(/^\|/, "| ")
  s = s.gsub(/ /, "v")
  s = s.gsub(/v・/, " ・")
  s = s.gsub(/v○/, " ○")
end
s = s.gsub(/^\s*\+.*?EOT/m) {|s| s.lines.reverse.drop(1).join + "EOT\n" }

s = s.gsub(/\+(\d\d)/, '-\1')
s = s.gsub(/container\.execute/, "container.next_player.execute")
s = "# #{__FILE__} から生成するファイルなので変更禁止\n" + s

puts s

File.write("standard_kif_white_side_spec.rb", s)
# assert { >>       it("１７の金が２８へ動く場合「２８金上」") { test1("２８金上") == ["２八金(17)", "２八金上", "-1728KI"] } }
# assert { >>       it("３８の金が２８へ動く場合「２８金寄」") { test1("２８金寄") == ["２八金(38)", "２八金寄", "-3828KI"] } }
# assert { >>       it("６７の金が７８に動く場合「７８金上」") { test1("７８金上") == ["７八金(67)", "７八金上", "-6778KI"] } }
# assert { >>       it("７９の金が７８に動く場合「７８金引」") { test1("７８金引") == ["７八金(79)", "７八金引", "-7978KI"] } }
# assert { >>       it("５４の金が５５に動く場合「５５金上」") { test1("５５金上") == ["５五金(54)", "５五金上", "-5455KI"] } }
# assert { >>       it("６５の金が５５に動く場合「５５金寄」") { test1("５５金寄") == ["５五金(65)", "５五金寄", "-6555KI"] } }
# assert { >>       it("２１の銀が２２に動く場合「２２銀上」") { test1("２２銀上") == ["２二銀(21)", "２二銀上", "-2122GI"] } }
# assert { >>       it("３３の銀が２２に動く場合「２２銀引」") { test1("２２銀引") == ["２二銀(33)", "２二銀引", "-3322GI"] } }
# assert { >>       it("６１の銀が７２に動く場合「７２銀上」") { test1("７２銀上") == ["７二銀(61)", "７二銀上", "-6172GI"] } }
# assert { >>       it("８３の銀が７２に動く場合「７２銀引」") { test1("７２銀引") == ["７二銀(83)", "７二銀引", "-8372GI"] } }
# assert { >>       it("１８の金が２９へ動く場合「２９金左」") { test1("２９金左") == ["２九金(18)", "２九金左", "-1829KI"] } }
# assert { >>       it("３８の金が２９へ動く場合「２９金右」") { test1("２９金右") == ["２九金(38)", "２九金右", "-3829KI"] } }
# assert { >>       it("７８の金が８８に動く場合「８８金左」") { test1("８８金左") == ["８八金(78)", "８八金左", "-7888KI"] } }
# assert { >>       it("９８の金が８８に動く場合「８８金右」") { test1("８８金右") == ["８八金(98)", "８八金右", "-9888KI"] } }
# assert { >>       it("４５の銀が５４に動く場合「５４銀左」") { test1("５４銀左") == ["５四銀(45)", "５四銀左", "-4554GI"] } }
# assert { >>       it("６５の銀が５４に動く場合「５４銀右」") { test1("５４銀右") == ["５四銀(65)", "５四銀右", "-6554GI"] } }
# assert { >>       it("２１の金が３２に動く場合「３２金左」") { test1("３２金左") == ["３二金(21)", "３二金左", "-2132KI"] } }
# assert { >>       it("３１の金が３２に動く場合「３２金直」") { test1("３２金直") == ["３二金(31)", "３二金直", "-3132KI"] } }
# assert { >>       it("７１の銀が７２に動く場合「７２銀直」") { test1("７２銀直") == ["７二銀(71)", "７二銀直", "-7172GI"] } }
# assert { >>       it("８１の銀が７２に動く場合「７２銀右」") { test1("７２銀右") == ["７二銀(81)", "７二銀右", "-8172GI"] } }
# assert { >>       it("４７の金が５８へ動く場合「５８金左」") { test1("５８金左") == ["５八金(47)", "５八金左", "-4758KI"] } }
# assert { >>       it("５７の金が５８へ動く場合「５８金直」") { test1("５８金直") == ["５八金(57)", "５八金直", "-5758KI"] } }
# assert { >>       it("６７の金が５８へ動く場合「５８金右」") { test1("５８金右") == ["５八金(67)", "５八金右", "-6758KI"] } }
# assert { >>       it("３１のと金が２２に動く場合「２２と右」")   { test1("２２と右")   == ["２二と(31)", "２二と右",   "-3122TO"] } # ※右から移動する駒が1枚のみであるので「上」を省略する }
# assert { >>       it("２１のと金が２２に動く場合「２２と直」")   { test1("２２と直")   == ["２二と(21)", "２二と直",   "-2122TO"] } }
# assert { >>       it("１１のと金が２２に動く場合「２２と左上」") { test1("２２と左上") == ["２二と(11)", "２二と左上", "-1122TO"] } # ※左から移動する駒が2枚あるので「上」を省略できない }
# assert { >>       it("１２のと金が２２に動く場合「２２と寄」")   { test1("２２と寄")   == ["２二と(12)", "２二と寄",   "-1222TO"] } # ※寄る駒が1枚しかないので「寄」のみとする }
# assert { >>       it("２３のと金が２２に動く場合「２２と引」")   { test1("２２と引")   == ["２二と(23)", "２二と引",   "-2322TO"] } }
# assert { >>       it("８１の銀が８２に動く場合「８２銀直」」") { test1("８２銀直")   == ["８二銀(81)", "８二銀直", "-8182GI"] } }
# assert { >>       it("９３の銀が８２に動く場合「８２銀右」")   { test1("８２銀右")   == ["８二銀(93)", "８二銀右", "-9382GI"] }     # ※右から移動する駒が1枚のみであるので「引」を省略する }
# assert { >>       it("７１の銀が８２へ動く場合「８２銀左上」") { test1("８２銀左上") == ["８二銀(71)", "８二銀左上", "-7182GI"] }   # ※左から移動する駒が2枚あるので「上」を省略できない }
# assert { >>       it("７３の銀が８２へ動く場合「８２銀左引」") { test1("８２銀左引") == ["８二銀(73)", "８二銀左引", "-7382GI"] }   # ※左から移動する駒が2枚あるので「引」を省略できない }
# assert { >>         it("１９の竜が２８へ動く場合「２８竜引」") { test1("２８竜引") == ["２八龍(19)", "２八龍引", "-1928RY"] } }
# assert { >>         it("２６の竜が２８へ動く場合「２８竜上」") { test1("２８竜上") == ["２八龍(26)", "２八龍上", "-2628RY"] } }
# assert { >>         it("８７の竜が６７へ動く場合「６７竜寄」") { test1("６７竜寄") == ["６七龍(87)", "６七龍寄", "-8767RY"] } # ※寄る駒が1枚なので「寄」（「６７竜右」ではありません） }
# assert { >>         it("５８の竜が６７へ引く場合「６７竜引」") { test1("６７竜引") == ["６七龍(58)", "６七龍引", "-5867RY"] } # ※引く駒が1枚なので「引」（「６７竜左」ではありません） }
# assert { >>         it("５５の竜が７５に動く場合「７５竜左」") { test1("７５竜左") == ["７五龍(55)", "７五龍左", "-5575RY"] } }
# assert { >>         it("９５の竜が７５に動く場合「７５竜右」") { test1("７５竜右") == ["７五龍(95)", "７五龍右", "-9575RY"] } }
# assert { >>         it("１１の竜が２２に動く場合「２２竜左」") { test1("２２竜左") == ["２二龍(11)", "２二龍左", "-1122RY"] } }
# assert { >>         it("２１の竜が２２に動く場合「２２竜右」") { test1("２２竜右") == ["２二龍(21)", "２二龍右", "-2122RY"] } }
# assert { >>         it("８２の竜が９３に動く場合「９３竜左」") { test1("９３竜左") == ["９三龍(82)", "９三龍左", "-8293RY"] } }
# assert { >>         it("９１の竜が９３に動く場合「９３竜右」") { test1("９３竜右") == ["９三龍(91)", "９三龍右", "-9193RY"] } }
# assert { >>         it("１９の馬が２８へ動く場合「２８馬左」") { test1("２８馬左") == ["２八馬(19)", "２八馬左", "-1928UM"] } }
# assert { >>         it("２９の馬が２８へ動く場合「２８馬右」") { test1("２８馬右") == ["２八馬(29)", "２八馬右", "-2928UM"] } }
# assert { >>         it("１５の馬が２５へ動く場合「２５馬寄」") { test1("２５馬寄") == ["２五馬(15)", "２五馬寄", "-1525UM"] } }
# assert { >>         it("４７の馬が２５へ引く場合「２５馬引」") { test1("２５馬引") == ["２五馬(47)", "２五馬引", "-4725UM"] } }
# assert { >>         it("９９の馬が９８に動く場合「９８馬引」") { test1("９８馬引") == ["９八馬(99)", "９八馬引", "-9998UM"] } }
# assert { >>         it("７６の馬が９８に動く場合「９８馬上」") { test1("９８馬上") == ["９八馬(76)", "９八馬上", "-7698UM"] } }
# assert { >>         it("１１の馬が３３に動く場合「３３馬左」") { test1("３３馬左") == ["３三馬(11)", "３三馬左", "-1133UM"] } }
# assert { >>         it("５１の竜が３３に動く場合「３３馬右」") { test1("３３馬右") == ["３三馬(51)", "３三馬右", "-5133UM"] } }
# assert { >>         it("６３の馬が８１に動く場合「８１馬左」") { test1("８１馬左") == ["８一馬(63)", "８一馬左", "-6381UM"] } }
# assert { >>         it("９２の馬が８１に動く場合「８１馬右」") { test1("８１馬右") == ["８一馬(92)", "８一馬右", "-9281UM"] } }
# >> # - から生成するファイルなので変更禁止
# >> require "spec_helper"
# >> 
# >> module Bioshogi
# >>   describe "将棋連盟が定めている人間向け棋譜入力" do
# >>     describe "P1 到達地点に複数の同じ駒が動ける場合「上」または「寄」または「引」で記入" do
# >>       def test1(str)
# >>         container = Container::Basic.new
# >>         container.board.placement_from_shape(<<~EOT)
# >>         +---------------------------+
# >>           | ・ ・v金 ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ○ ・ ・ ・v金 ○ ・|
# >>         | ・ ・ ・v金 ・ ・ ・ ・v金|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・v金 ○ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・v金 ・ ・ ・ ・|
# >>         | ・v銀 ・ ・ ・ ・v銀 ・ ・|
# >>         | ・ ○ ・ ・ ・ ・ ・ ○ ・|
# >>         | ・ ・ ・v銀 ・ ・ ・v銀 ・|
# >>         +---------------------------+
# >>           EOT
# >>         container.next_player.execute(str)
# >>         container.hand_logs.last.to_kif_ki2_csa
# >>       end
# >> 
# >>       it "works" do
# >>         # P1A
# >>         assert("１７の金が２８へ動く場合「２８金上」") { test1("２８金上") == ["２八金(17)", "２八金上", "-1728KI"] }
# >>         assert("３８の金が２８へ動く場合「２８金寄」") { test1("２８金寄") == ["２八金(38)", "２八金寄", "-3828KI"] }
# >> 
# >>         # P1B
# >>         assert("６７の金が７８に動く場合「７８金上」") { test1("７８金上") == ["７八金(67)", "７八金上", "-6778KI"] }
# >>         assert("７９の金が７８に動く場合「７８金引」") { test1("７８金引") == ["７八金(79)", "７八金引", "-7978KI"] }
# >> 
# >>         # P1C
# >>         assert("５４の金が５５に動く場合「５５金上」") { test1("５５金上") == ["５五金(54)", "５五金上", "-5455KI"] }
# >>         assert("６５の金が５５に動く場合「５５金寄」") { test1("５５金寄") == ["５五金(65)", "５五金寄", "-6555KI"] }
# >> 
# >>         # P1D
# >>         assert("２１の銀が２２に動く場合「２２銀上」") { test1("２２銀上") == ["２二銀(21)", "２二銀上", "-2122GI"] }
# >>         assert("３３の銀が２２に動く場合「２２銀引」") { test1("２２銀引") == ["２二銀(33)", "２二銀引", "-3322GI"] }
# >> 
# >>         # P1E
# >>         assert("６１の銀が７２に動く場合「７２銀上」") { test1("７２銀上") == ["７二銀(61)", "７二銀上", "-6172GI"] }
# >>         assert("８３の銀が７２に動く場合「７２銀引」") { test1("７２銀引") == ["７二銀(83)", "７二銀引", "-8372GI"] }
# >>       end
# >>     end
# >> 
# >>     describe "P2 到達地点に2枚の同じ駒が動ける場合、動作でどの駒が動いたかわからない時は、「左」「右」で記入" do
# >>       def test1(str)
# >>         container = Container::Basic.new
# >>         container.board.placement_from_shape(<<~EOT)
# >>         +---------------------------+
# >>           | ・ ・ ・ ・ ・ ・ ・ ○ ・|
# >>         |v金 ○v金 ・ ・ ・v金 ・v金|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・v銀 ・v銀 ・ ・ ・|
# >>         | ・ ・ ・ ・ ○ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ○ ・ ・ ・ ○ ・ ・|
# >>         | ・v銀v銀 ・ ・ ・v金v金 ・|
# >>         +---------------------------+
# >>           EOT
# >>         container.next_player.execute(str)
# >>         container.hand_logs.last.to_kif_ki2_csa
# >>       end
# >> 
# >>       it "works" do
# >>         # P2A 上がる駒が2枚ある場合「上」を省略して「左」「右」
# >>         assert("１８の金が２９へ動く場合「２９金左」") { test1("２９金左") == ["２九金(18)", "２九金左", "-1829KI"] }
# >>         assert("３８の金が２９へ動く場合「２９金右」") { test1("２９金右") == ["２九金(38)", "２九金右", "-3829KI"] }
# >> 
# >>         # P2B 寄る駒が2枚ある場合「寄」を省略して「左」「右」
# >>         assert("７８の金が８８に動く場合「８８金左」") { test1("８８金左") == ["８八金(78)", "８八金左", "-7888KI"] }
# >>         assert("９８の金が８８に動く場合「８８金右」") { test1("８８金右") == ["８八金(98)", "８八金右", "-9888KI"] }
# >> 
# >>         # P2C 引く駒が2枚ある場合「引」を省略して「左」「右」
# >>         assert("４５の銀が５４に動く場合「５４銀左」") { test1("５４銀左") == ["５四銀(45)", "５四銀左", "-4554GI"] }
# >>         assert("６５の銀が５４に動く場合「５４銀右」") { test1("５４銀右") == ["５四銀(65)", "５四銀右", "-6554GI"] }
# >> 
# >>         # P2D 例外で、金銀が横に2枚以上並んでいる場合のみ1段上に上がる時「直」
# >>         assert("２１の金が３２に動く場合「３２金左」") { test1("３２金左") == ["３二金(21)", "３二金左", "-2132KI"] }
# >>         assert("３１の金が３２に動く場合「３２金直」") { test1("３２金直") == ["３二金(31)", "３二金直", "-3132KI"] }
# >> 
# >>         # P2E
# >>         assert("７１の銀が７２に動く場合「７２銀直」") { test1("７２銀直") == ["７二銀(71)", "７二銀直", "-7172GI"] }
# >>         assert("８１の銀が７２に動く場合「７２銀右」") { test1("７２銀右") == ["７二銀(81)", "７二銀右", "-8172GI"] }
# >>       end
# >>     end
# >> 
# >>     describe "P3 到達地点に3枚以上の同じ駒が動ける場合、動作でどの駒が動いたかわからない時" do
# >>       def test1(str)
# >>         container = Container::Basic.new
# >>         container.board.placement_from_shape(<<~EOT)
# >>         +---------------------------+
# >>           | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・ ○ ・ ・ ・ ・|
# >>         | ・ ・ ・v金v金v金 ・ ・ ・|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >>         |v銀 ・v銀 ・ ・ ・ ・vと ・|
# >>         | ・ ○ ・ ・ ・ ・ ・ ○vと|
# >>         | ・v銀v銀 ・ ・ ・vとvとvと|
# >>         +---------------------------+
# >>           EOT
# >>         container.next_player.execute(str)
# >>         container.hand_logs.last.to_kif_ki2_csa
# >>       end
# >> 
# >>       it "works" do
# >>         # P3A
# >>         assert("４７の金が５８へ動く場合「５８金左」") { test1("５８金左") == ["５八金(47)", "５八金左", "-4758KI"] }
# >>         assert("５７の金が５８へ動く場合「５８金直」") { test1("５８金直") == ["５八金(57)", "５八金直", "-5758KI"] }
# >>         assert("６７の金が５８へ動く場合「５８金右」") { test1("５８金右") == ["５八金(67)", "５八金右", "-6758KI"] }
# >> 
# >>         # P3B
# >>         assert("３１のと金が２２に動く場合「２２と右」")   { test1("２２と右")   == ["２二と(31)", "２二と右",   "-3122TO"] } # ※右から移動する駒が1枚のみであるので「上」を省略する }
# >>         assert("２１のと金が２２に動く場合「２２と直」")   { test1("２２と直")   == ["２二と(21)", "２二と直",   "-2122TO"] }
# >>         assert("１１のと金が２２に動く場合「２２と左上」") { test1("２２と左上") == ["２二と(11)", "２二と左上", "-1122TO"] } # ※左から移動する駒が2枚あるので「上」を省略できない }
# >>         assert("１２のと金が２２に動く場合「２２と寄」")   { test1("２２と寄")   == ["２二と(12)", "２二と寄",   "-1222TO"] } # ※寄る駒が1枚しかないので「寄」のみとする }
# >>         assert("２３のと金が２２に動く場合「２２と引」")   { test1("２２と引")   == ["２二と(23)", "２二と引",   "-2322TO"] }
# >> 
# >>         # P3C
# >>         assert("８１の銀が８２に動く場合「８２銀直」」") { test1("８２銀直")   == ["８二銀(81)", "８二銀直", "-8182GI"] }
# >>         assert("９３の銀が８２に動く場合「８２銀右」")   { test1("８２銀右")   == ["８二銀(93)", "８二銀右", "-9382GI"] }     # ※右から移動する駒が1枚のみであるので「引」を省略する }
# >>         assert("７１の銀が８２へ動く場合「８２銀左上」") { test1("８２銀左上") == ["８二銀(71)", "８二銀左上", "-7182GI"] }   # ※左から移動する駒が2枚あるので「上」を省略できない }
# >>         assert("７３の銀が８２へ動く場合「８２銀左引」") { test1("８２銀左引") == ["８二銀(73)", "８二銀左引", "-7382GI"] }   # ※左から移動する駒が2枚あるので「引」を省略できない }
# >>       end
# >>     end
# >> 
# >>     describe "P4 竜が2枚の場合はやはり動作を優先します。ただし、「直」は使わずに「左」「右」で記入" do
# >>       def test1(str)
# >>         container = Container::Basic.new
# >>         container.board.placement_from_shape(@board)
# >>         container.next_player.execute(str)
# >>         container.hand_logs.last.to_kif_ki2_csa
# >>       end
# >> 
# >>       describe "P4A" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・v龍 ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ○ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・v龍|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("１９の竜が２８へ動く場合「２８竜引」") { test1("２８竜引") == ["２八龍(19)", "２八龍引", "-1928RY"] }
# >>           assert("２６の竜が２８へ動く場合「２８竜上」") { test1("２８竜上") == ["２八龍(26)", "２八龍上", "-2628RY"] }
# >>         end
# >>       end
# >> 
# >>       describe "P4B" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・v龍 ・ ○ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・v龍 ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("８７の竜が６７へ動く場合「６７竜寄」") { test1("６７竜寄") == ["６七龍(87)", "６七龍寄", "-8767RY"] } # ※寄る駒が1枚なので「寄」（「６７竜右」ではありません） }
# >>           assert("５８の竜が６７へ引く場合「６７竜引」") { test1("６７竜引") == ["６七龍(58)", "６七龍引", "-5867RY"] } # ※引く駒が1枚なので「引」（「６７竜左」ではありません） }
# >>         end
# >>       end
# >> 
# >>       describe "P4C" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> |v龍 ・ ○ ・v龍 ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("５５の竜が７５に動く場合「７５竜左」") { test1("７５竜左") == ["７五龍(55)", "７五龍左", "-5575RY"] }
# >>           assert("９５の竜が７５に動く場合「７５竜右」") { test1("７５竜右") == ["７五龍(95)", "７五龍右", "-9575RY"] }
# >>         end
# >>       end
# >> 
# >>       describe "P4D" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・v龍v龍|
# >> | ・ ・ ・ ・ ・ ・ ・ ○ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("１１の竜が２２に動く場合「２２竜左」") { test1("２２竜左") == ["２二龍(11)", "２二龍左", "-1122RY"] }
# >>           assert("２１の竜が２２に動く場合「２２竜右」") { test1("２２竜右") == ["２二龍(21)", "２二龍右", "-2122RY"] }
# >>         end
# >>       end
# >> 
# >>       describe "P4E" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> |v龍 ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・v龍 ・ ・ ・ ・ ・ ・ ・|
# >> | ○ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("８２の竜が９３に動く場合「９３竜左」") { test1("９３竜左") == ["９三龍(82)", "９三龍左", "-8293RY"] }
# >>           assert("９１の竜が９３に動く場合「９３竜右」") { test1("９３竜右") == ["９三龍(91)", "９三龍右", "-9193RY"] }
# >>         end
# >>       end
# >>     end
# >> 
# >>     describe "P5 馬が2枚の場合もやはり動作を優先します。竜と同様、「直」は使わずに「左」「右」で記入" do
# >>       def test1(str)
# >>         container = Container::Basic.new
# >>         container.board.placement_from_shape(@board)
# >>         container.next_player.execute(str)
# >>         container.hand_logs.last.to_kif_ki2_csa
# >>       end
# >> 
# >>       describe "P5A" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ○ ・|
# >> | ・ ・ ・ ・ ・ ・ ・v馬v馬|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("１９の馬が２８へ動く場合「２８馬左」") { test1("２８馬左") == ["２八馬(19)", "２八馬左", "-1928UM"] }
# >>           assert("２９の馬が２８へ動く場合「２８馬右」") { test1("２８馬右") == ["２八馬(29)", "２八馬右", "-2928UM"] }
# >>         end
# >>       end
# >> 
# >>       describe "P5B" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ○v馬|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・v馬 ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("１５の馬が２５へ動く場合「２５馬寄」") { test1("２５馬寄") == ["２五馬(15)", "２五馬寄", "-1525UM"] }
# >>           assert("４７の馬が２５へ引く場合「２５馬引」") { test1("２５馬引") == ["２五馬(47)", "２五馬引", "-4725UM"] }
# >>         end
# >>       end
# >> 
# >>       describe "P5C" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・v馬 ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ○ ・ ・ ・ ・ ・ ・ ・ ・|
# >> |v馬 ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("９９の馬が９８に動く場合「９８馬引」") { test1("９８馬引") == ["９八馬(99)", "９八馬引", "-9998UM"] }
# >>           assert("７６の馬が９８に動く場合「９８馬上」") { test1("９８馬上") == ["９八馬(76)", "９八馬上", "-7698UM"] }
# >>         end
# >>       end
# >> 
# >>       describe "P5D" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ・ ・ ・v馬 ・ ・ ・v馬|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ○ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("１１の馬が３３に動く場合「３３馬左」") { test1("３３馬左") == ["３三馬(11)", "３三馬左", "-1133UM"] }
# >>           assert("５１の竜が３３に動く場合「３３馬右」") { test1("３３馬右") == ["３三馬(51)", "３三馬右", "-5133UM"] }
# >>         end
# >>       end
# >> 
# >>       describe "P5E" do
# >>         before do
# >>           @board = <<~EOT
# >> +---------------------------+
# >> | ・ ○ ・ ・ ・ ・ ・ ・ ・|
# >> |v馬 ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・v馬 ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> | ・ ・ ・ ・ ・ ・ ・ ・ ・|
# >> +---------------------------+
# >> EOT
# >> 
# >>         end
# >> 
# >>         it "works" do
# >>           assert("６３の馬が８１に動く場合「８１馬左」") { test1("８１馬左") == ["８一馬(63)", "８一馬左", "-6381UM"] }
# >>           assert("９２の馬が８１に動く場合「８１馬右」") { test1("８１馬右") == ["８一馬(92)", "８一馬右", "-9281UM"] }
# >>         end
# >>       end
# >>     end
# >>   end
# >> end
